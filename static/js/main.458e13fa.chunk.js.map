{"version":3,"sources":["components/PageOptimization/LineChart.js","components/PageOptimization/AllList.js","components/PageOptimization/PageDetailLineChart.js","components/PageOptimization/DetailModal.js","components/PageOptimization/ApiCaller.js","components/PageOptimization/PageOptimization.js","components/Nav/Nav.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["lineChart","allTasks","indicatorData","ComposedChart","width","height","data","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","dataKey","scale","YAxis","Tooltip","ReferenceLine","y","label","strokeDasharray","Legend","payload","value","id","Bar","x","parseFloat","gsx$efficiency","$t","barSize","fill","Line","type","AllList","setTargetTask","className","map","task","index","onClick","gsx$pagename","gsx$createtime","PageDetailLineChart","pageData","indicatorName","ResponsiveContainer","mirror","tick","hide","axisLine","verticalAlign","activeDot","r","dot","DetailModal","page","openModal","setOpenModal","style","display","item","ApiCaller","url","axios","get","FetchOptimizationData","FetchIndicatorData","FetchPage","PageOptimization","useState","setAllTasks","setIndicatorData","setPage","setPageData","mostEfficientPage","setMostEfficientPage","projectCount","setProjectCount","useEffect","then","feed","entry","length","gsx$efficiencyaverage","pageName","name","slice","color","Nav","location","useLocation","to","pathname","App","path","exact","component","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.458e13fa.chunk.js","sourcesContent":["import { ComposedChart, ReferenceLine, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst lineChart = ({ allTasks, indicatorData }) => {\n    return (\n        <ComposedChart\n            width={900}\n            height={270}\n            data={allTasks}\n            margin={{\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20,\n            }}\n        >\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis dataKey=\"gsx$pagename.$t\" scale=\"band\"></XAxis>\n            {/* <YAxis domain={[0, 'dataMax + 50']} allowDataOverflow={true} /> */}\n            <YAxis />\n            <Tooltip />\n            <ReferenceLine y={indicatorData} label=\"Average\" stroke=\"red\" strokeDasharray=\"3 3\" />\n            <Legend payload={{ value: '123', id: 1 }} />\n            <Bar dataKey={(x) => parseFloat(x.gsx$efficiency.$t)} barSize={20} fill=\"#ff7f2f\" />\n            <Line type=\"monotone\" dataKey=\"gsx$efficiency.$t\" stroke=\"#413ea0\" />\n        </ComposedChart>\n    );\n};\n\nexport default lineChart;\n","import './style/AllList.css';\nimport { Link } from 'react-router-dom';\n\nconst AllList = ({ allTasks, setTargetTask }) => {\n    return (\n        <div className=\"list-box\">\n            {allTasks.map((task, index) => (\n                <div\n                    className=\"list\"\n                    onClick={() => {\n                        setTargetTask(task);\n                    }}\n                    key={index}\n                >\n                    <div className=\"text\">{task.gsx$pagename.$t}</div>\n                    <div className=\"text page-score\">{task.gsx$efficiency.$t}%</div>\n                    <div className=\"create-time\">{task.gsx$createtime.$t}</div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default AllList;\n","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst PageDetailLineChart = ({ pageData, indicatorName }) => {\n    return (\n        <ResponsiveContainer width=\"100%\">\n            <LineChart\n                width={343}\n                height={130}\n                data={pageData}\n                margin={{\n                    top: 20,\n                    right: 30,\n                    left: 5,\n                    bottom: 0,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis mirror={true} tick={false} hide=\"true\" dataKey=\"createdAt\" />\n                <YAxis axisLine={false} />\n                <Tooltip />\n                <Legend verticalAlign=\"bottom\" height={20} />\n                <Line type=\"monotone\" dataKey={indicatorName} stroke=\"#d9812f\" activeDot={{ r: 4 }} dot={false} />\n            </LineChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default PageDetailLineChart;\n","import PageDetailLineChart from './PageDetailLineChart';\nimport './style/PageDetailModal.css';\nconst DetailModal = ({ page, pageData, openModal, setOpenModal }) => {\n    const variable = ['CLS', 'FCP', 'FMP', 'LCP', 'SI', 'TBT'];\n    return (\n        <div className=\"modal-box\" style={{ display: openModal ? 'block' : 'none' }}>\n            <div className=\"page-detail-modal\">\n                <div className=\"cancel-icon\" onClick={() => setOpenModal(false)}></div>\n\n                <div className=\"main\">hello</div>\n                <div className=\"graph-box\">\n                    {variable.map((item, index) => (\n                        <div key={index}>\n                            <div className=\"graph-text\">{item}</div>\n                            <div className=\"graph-content\">\n                                <PageDetailLineChart pageData={pageData} indicatorName={item}></PageDetailLineChart>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DetailModal;\n","import axios from 'axios';\n\nconst OptimizationDataUrl =\n    'https://spreadsheets.google.com/feeds/list/1pCvD5tJAirXHWGC4CRDkaLsedSlopYCTkkynSq4RbxI/2/public/values?alt=json';\nconst IndicatorDataUrl =\n    'https://spreadsheets.google.com/feeds/list/1pCvD5tJAirXHWGC4CRDkaLsedSlopYCTkkynSq4RbxI/3/public/values?alt=json';\n\nconst PageUrl = 'https://kpi-node.herokuapp.com/all-page-name';\n\nconst ApiCaller = (url) => {\n    return axios.get(url);\n};\n\nconst FetchOptimizationData = ApiCaller(OptimizationDataUrl);\nconst FetchIndicatorData = ApiCaller(IndicatorDataUrl);\nconst FetchPage = ApiCaller(PageUrl);\n\nexport { FetchOptimizationData, FetchIndicatorData, FetchPage };\n","import Form from './Form';\nimport MyBarChart from './BarChart';\nimport NyLineChart from './LineChart';\nimport AllList from './AllList';\nimport DetailModal from './DetailModal';\nimport { useState, useEffect } from 'react';\nimport './style/PageOptimization.css';\nimport { fakeData } from './fakeData';\nimport axios from 'axios';\nimport { FetchOptimizationData, FetchIndicatorData, FetchPage } from './ApiCaller';\nconst PageOptimization = () => {\n    // const fakeData = fakeData;\n    const [allTasks, setAllTasks] = useState([]); //所有專案優化紀錄\n    const [targetTask, setTargetTask] = useState({});\n    const [indicatorData, setIndicatorData] = useState(''); //指標數字，如：效能平均\n    const [page, setPage] = useState([]); //所有的監控頁面\n    const [pageData, setPageData] = useState([]); //監控頁面詳細數字，如：FCP、TTB等\n    const [mostEfficientPage, setMostEfficientPage] = useState(''); //優化效率最高值\n    const [openModal, setOpenModal] = useState(false); //開啟modal\n    const [projectCount, setProjectCount] = useState(0); //累積優化件數\n\n    //function\n    const tagClick = (pageName) => {\n        axios.get(`https://kpi-node.herokuapp.com/all-score/${pageName}`).then(({ data }) => {\n            setPageData(data);\n        });\n        setOpenModal(true);\n    };\n\n    //fetch fixed data\n    useEffect(() => {\n        FetchOptimizationData.then(({ data }) => {\n            setProjectCount(data.feed.entry.length);\n            setAllTasks(data.feed.entry);\n            setMostEfficientPage(data.feed.entry[0].gsx$pagename.$t);\n        });\n        FetchIndicatorData.then(({ data }) => {\n            setIndicatorData(data.feed.entry[0].gsx$efficiencyaverage.$t);\n        });\n        FetchPage.then(({ data }) => {\n            setPage(data);\n        });\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"topic\">Optimization</div>\n\n            <div className=\"page-optimization\">\n                {/* <Form allTasks={allTasks} setAllTasks={setAllTasks}></Form> */}\n                {/* <MyBarChart allTasks={allTasks} targetTask={targetTask}></MyBarChart> */}\n                <div>\n                    <div className=\"graph-up\">\n                        <div className=\"indicator\">\n                            <div className=\"inter\">\n                                <div className=\"accumulate-icon\"></div>\n                                <div>\n                                    <div className=\"inter-title\">目前累積優化頁面</div>\n                                    <div className=\"inter-value\">{projectCount}件</div>\n                                </div>\n                            </div>\n                            <div className=\"inter\">\n                                <div className=\"average-icon\"></div>\n                                <div>\n                                    <div className=\"inter-title\">優化平均成長</div>\n                                    <div className=\"inter-value\">{indicatorData}％</div>\n                                    <div className=\"inter-content\">備註：效率平均值</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"indicator\">\n                            <div className=\"inter\">\n                                <div className=\"trace-icon\"></div>\n                                <div>\n                                    <div className=\"inter-title\">正在追蹤的網頁</div>\n                                    <div className=\"tag-box\">\n                                        {page.map((page, index) => (\n                                            <div className=\"tag\" key={index} onClick={() => tagClick(page.pageName)}>\n                                                {page.name}\n                                            </div>\n                                        ))}\n                                    </div>\n                                    <DetailModal\n                                        setOpenModal={setOpenModal}\n                                        openModal={openModal}\n                                        page={page}\n                                        pageData={pageData}\n                                    ></DetailModal>\n                                </div>\n                            </div>\n                            <div className=\"inter\">\n                                <div className=\"compare-icon\"></div>\n                                <div>\n                                    <div className=\"inter-title\">優化前後差異最高網頁</div>\n                                    <div className=\"inter-value\">{mostEfficientPage}</div>\n                                    <div className=\"inter-content\">備註：無</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"page-count\">\n                            <div>\n                                <div className=\"title\">\n                                    <div className=\"rank-icon\"></div>\n                                    <div className=\"title-text\">網頁優化效率提升排名</div>\n                                </div>\n                                {allTasks.slice(0, 8).map((task, index) => (\n                                    <div\n                                        key={index}\n                                        className=\"rank-content\"\n                                        style={{ color: index < 3 ? '#ff7f2f' : '#c0c0c0' }}\n                                    >\n                                        <div className=\"rank-num\">{index + 1}</div>\n                                        <div className=\"rank-name\">{task.gsx$pagename.$t}</div>\n                                        <div className=\"rank-score\">{task.gsx$efficiency.$t}%</div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"line-chart-container\">\n                        <div className=\"inter\">\n                            <div className=\"indicator-icon\"></div>\n                            <div className=\"inter-title\">專案績效分佈</div>\n                        </div>\n                        <NyLineChart indicatorData={indicatorData} allTasks={allTasks}></NyLineChart>\n                    </div>\n                </div>\n                <div className=\"all-list-container\">\n                    <AllList allTasks={allTasks} setTargetTask={setTargetTask}></AllList>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PageOptimization;\n","import { Link, useLocation } from 'react-router-dom';\nimport './Nav.css';\nconst Nav = () => {\n    const location = useLocation();\n\n    return (\n        <nav className=\"nav-bar\">\n            <Link to=\"/\" className={location.pathname === '/' ? 'active' : ''}>\n                Overview\n            </Link>\n            <Link to=\"/project\" className={location.pathname === '/project' ? 'active' : ''}>\n                Project\n            </Link>\n            <Link to=\"/optimization\" className={location.pathname === '/optimization' ? 'active' : ''}>\n                Optimization\n            </Link>\n        </nav>\n    );\n};\n\nexport default Nav;\n","import { Route } from 'react-router-dom';\nimport PageOptimization from './components/PageOptimization/PageOptimization';\nimport Nav from './components/Nav/Nav';\nimport AllList from './components/PageOptimization/AllList';\nimport Error from './components/404';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Nav />\n\n            <Route path=\"/\" exact={true}></Route>\n            <Route path=\"/optimization\" exact={true} component={PageOptimization}></Route>\n            {/* <header className=\"App-header\"><Counter /></header> */}\n            {/* <Route component={Error} /> */}\n        </div>\n    );\n}\n\nexport default App;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import { fetchCount } from './counterAPI';\n\nconst initialState = {\n    value: 0,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n//  typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n//   'counter/fetchCount',｀\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload;\n        },\n    },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n        dispatch(incrementByAmount(amount));\n    }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <Switch>\n                    <App />\n                </Switch>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}