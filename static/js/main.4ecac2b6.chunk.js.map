{"version":3,"sources":["components/PageOptimization/AllList/AllList.tsx","components/PageOptimization/Graph/PageDetailLineChart.js","components/PageOptimization/Graph/Radar.js","components/PageOptimization/DetailModel/DetailModal.tsx","components/PageOptimization/AccumulationOfOptimizationPage/AccumulationOfOptimizationPage.tsx","components/PageOptimization/AverageOfOptimization/AverageOfOptimization.tsx","components/PageOptimization/ComparePage/ComparePage.tsx","components/PageOptimization/RankOfPage/RankOfPage.tsx","components/PageOptimization/TrackingPage/TrackingPage.tsx","components/PageOptimization/Graph/LineChart.js","components/PageOptimization/ProjectDistribution/ProjectDistribution.tsx","components/PageOptimization/ApiCaller.js","components/PageOptimization/PageOptimization.tsx","components/Nav/Nav.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["AllList","allTasks","setTargetTask","className","map","task","index","gsx$pagename","$t","gsx$efficiency","gsx$createtime","PageDetailLineChart","pageData","indicatorName","ResponsiveContainer","LineChart","data","margin","top","right","left","CartesianGrid","strokeDasharray","XAxis","tickFormatter","unixTime","moment","format","axisLine","label","dataKey","YAxis","hide","Tooltip","Line","type","stroke","activeDot","r","dot","radar","averageData","Object","entries","key","value","push","name","score","width","height","RadarChart","outerRadius","PolarGrid","PolarAngleAxis","tick","fill","color","PolarRadiusAxis","angle","domain","Radar","Legend","DetailModal","pageName","openModal","setOpenModal","style","display","onClick","item","AccumulationOfOptimizationPage","projectCount","AverageOfOptimization","indicatorData","ComparePage","mostEfficientPage","RankOfPage","slice","TrackingPage","page","tagClick","lineChart","ComposedChart","bottom","scale","ReferenceLine","y","payload","id","Bar","x","parseFloat","barSize","ProjectDistribution","PageUrl","window","location","hostname","ApiCaller","url","axios","get","FetchOptimizationData","FetchIndicatorData","FetchPage","PageOptimization","useState","setAllTasks","setIndicatorData","setPage","setPageData","setMostEfficientPage","setProjectCount","setPageName","setAverageData","useEffect","then","feed","entry","length","gsx$efficiencyaverage","getAllScore","getAverageScore","res","_id","Nav","useLocation","to","pathname","App","path","exact","component","fetchCount","amount","Promise","resolve","setTimeout","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","actions","store","configureStore","reducer","counter","counterReducer","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ecac2b6.chunk.js","sourcesContent":["import './AllList.scss';\nimport { AllListType } from '../Type';\n\nconst AllList = ({ allTasks, setTargetTask }: AllListType) => {\n    return (\n        <div className=\"list-box\">\n            {allTasks.map((task, index) => (\n                <div\n                    className=\"list\"\n                    // onClick={() => {\n                    //     setTargetTask(task);\n                    // }}\n                    key={index}\n                >\n                    <div className=\"text\">{task.gsx$pagename.$t}</div>\n                    <div className=\"text page-score\">{task.gsx$efficiency.$t}%</div>\n                    <div className=\"create-time\">{task.gsx$createtime.$t}</div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default AllList;\n","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport moment from 'moment';\n\nconst PageDetailLineChart = ({ pageData, indicatorName }) => {\n    return (\n        <ResponsiveContainer>\n            <LineChart\n                // width={343}\n                // height={130}\n\n                data={pageData}\n                margin={{\n                    top: 20,\n                    right: 30,\n                    left: -20,\n                    // bottom: 0,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                    tickFormatter={(unixTime) => moment(unixTime).format('M/D')}\n                    axisLine={false}\n                    label={false}\n                    // hide=\"true\"\n                    dataKey=\"createdAt\"\n                />\n                <YAxis axisLine={false} hide=\"\" />\n                <Tooltip />\n                {/* <Legend layout=\"horizontal\" verticalAlign=\"bottom\" align=\"center\" /> */}\n                <Line type=\"monotone\" dataKey={indicatorName} stroke=\"#ff7f2f\" activeDot={{ r: 4 }} dot={false} />\n            </LineChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default PageDetailLineChart;\n","import {\n    Radar,\n    RadarChart,\n    PolarGrid,\n    Legend,\n    PolarAngleAxis,\n    PolarRadiusAxis,\n    ResponsiveContainer,\n    Label,\n} from 'recharts';\n\nconst radar = ({ averageData }) => {\n    let data = [];\n    for (let [key, value] of Object.entries(averageData)) {\n        // console.log(key, value);\n        data.push({ name: key, score: value });\n    }\n\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <RadarChart outerRadius=\"80%\" data={data}>\n                <PolarGrid stroke=\"#ffb135\" />\n                <PolarAngleAxis tick={{ fill: '#707070' }} dataKey=\"name\" color=\"#707070\" />\n                <PolarRadiusAxis angle={30} domain={[0, 1]} />\n                <Radar\n                    name=\"Average\"\n                    dataKey=\"score\"\n                    stroke=\"#fdd38f\"\n                    fill=\"rgba(255, 229, 59, 0.5)\"\n                    // fillOpacity={0.6}\n                />\n                <Legend />\n            </RadarChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default radar;\n","import PageDetailLineChart from '../Graph/PageDetailLineChart';\nimport MyRadar from '../Graph/Radar';\nimport './PageDetailModal.scss';\nimport { IDetailModal } from '../Type';\n\nconst DetailModal = ({ pageName, pageData, averageData, openModal, setOpenModal }: IDetailModal) => {\n    const variable = ['CLS', 'FCP', 'FMP', 'LCP', 'SI', 'TBT'];\n\n    return (\n        <div className=\"modal-box\" style={{ display: openModal ? 'block' : 'none' }}>\n            <div className=\"page-detail-modal\">\n                <div className=\"cancel-icon\" onClick={() => setOpenModal(false)}></div>\n                <div className=\"overall\">\n                    <div className=\"page-name\">{pageName}</div>\n                    <div>time select</div>\n                    <div className=\"radar\">\n                        <MyRadar averageData={averageData}></MyRadar>\n                    </div>\n                </div>\n\n                <div className=\"graph-box\">\n                    {variable.map((item, index) => (\n                        <div className=\"graph-container\" key={index}>\n                            <div className=\"graph-text\">{item}</div>\n                            <div className=\"graph-content\">\n                                <PageDetailLineChart pageData={pageData} indicatorName={item}></PageDetailLineChart>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DetailModal;\n","import { IAccumulationOfOptimizationPage } from '../Type';\nimport './AccumulationOfOptimization.scss';\n\nconst AccumulationOfOptimizationPage = ({ projectCount }: IAccumulationOfOptimizationPage) => {\n    return (\n        <div className=\"inter\">\n            <div className=\"accumulate-icon\"></div>\n            <div>\n                <div className=\"inter-title\">目前累積優化頁面</div>\n                <div className=\"inter-value\">{projectCount}件</div>\n            </div>\n        </div>\n    );\n};\n\nexport default AccumulationOfOptimizationPage;\n","import { IAverageOfOptimization } from '../Type';\nimport './AverageOfOptimization.scss';\nconst AverageOfOptimization = ({ indicatorData }: IAverageOfOptimization) => {\n    return (\n        <div className=\"inter\">\n            <div className=\"average-icon\"></div>\n            <div>\n                <div className=\"inter-title\">優化平均成長</div>\n                <div className=\"inter-value\">{indicatorData}％</div>\n                <div className=\"inter-content\">備註：效率平均值</div>\n            </div>\n        </div>\n    );\n};\n\nexport default AverageOfOptimization;\n","import { IComparePage } from '../Type';\nimport './ComparePage.scss';\nconst ComparePage = ({ mostEfficientPage }: IComparePage) => {\n    return (\n        <div className=\"inter\">\n            <div className=\"compare-icon\"></div>\n            <div>\n                <div className=\"inter-title\">優化前後差異最高網頁</div>\n                <div className=\"inter-value\">{mostEfficientPage}</div>\n                <div className=\"inter-content\">備註：無</div>\n            </div>\n        </div>\n    );\n};\n\nexport default ComparePage;\n","import { AllListType } from '../Type';\nimport './RankOfPage.scss';\nconst RankOfPage = ({ allTasks }: AllListType) => {\n    return (\n        <div className=\"page-count\">\n            <div className=\"title\">\n                <div className=\"rank-icon\"></div>\n                <div className=\"title-text\">網頁優化效率提升排名</div>\n            </div>\n            {allTasks.slice(0, 8).map((task, index) => (\n                <div key={index} className=\"rank-content\" style={{ color: index < 3 ? '#ff7f2f' : '#c0c0c0' }}>\n                    <div className=\"rank-num\">{index + 1}</div>\n                    <div className=\"rank-name\">{task.gsx$pagename.$t}</div>\n                    <div className=\"rank-score\">{task.gsx$efficiency.$t}%</div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default RankOfPage;\n","import { ITrackingPage } from '../Type';\nimport './TrackingPage.scss';\nconst TrackingPage = ({ page, tagClick }: ITrackingPage) => {\n    return (\n        <div className=\"inter\">\n            <div className=\"trace-icon\"></div>\n            <div>\n                <div className=\"inter-title\">正在追蹤的網頁</div>\n                <div className=\"tag-box\">\n                    {page.map((page, index) => (\n                        <div className=\"tag\" key={index} onClick={() => tagClick(page.pageName)}>\n                            {page.name}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TrackingPage;\n","import { ComposedChart, ReferenceLine, Line, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst lineChart = ({ allTasks, indicatorData }) => {\n    return (\n        <ComposedChart\n            width={900}\n            height={270}\n            data={allTasks}\n            margin={{\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20,\n            }}\n        >\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis dataKey=\"gsx$pagename.$t\" scale=\"band\"></XAxis>\n            {/* <YAxis domain={[0, 'dataMax + 50']} allowDataOverflow={true} /> */}\n            <YAxis />\n            <Tooltip />\n            <ReferenceLine y={indicatorData} label=\"Average\" stroke=\"red\" strokeDasharray=\"3 3\" />\n            <Legend payload={{ value: '123', id: 1 }} />\n            <Bar dataKey={(x) => parseFloat(x.gsx$efficiency.$t)} barSize={20} fill=\"#ff7f2f\" />\n            <Line type=\"monotone\" dataKey=\"gsx$efficiency.$t\" stroke=\"#413ea0\" />\n        </ComposedChart>\n    );\n};\n\nexport default lineChart;\n","import MyLineChart from '../Graph/LineChart';\nimport { IProjectDistributionProps } from '../Type';\nimport './ProjectDistribution.scss';\nconst ProjectDistribution = ({ indicatorData, allTasks }: IProjectDistributionProps) => {\n    return (\n        <div>\n            <div className=\"inter\">\n                <div className=\"indicator-icon\"></div>\n                <div className=\"inter-title\">專案績效分佈</div>\n            </div>\n            <MyLineChart indicatorData={indicatorData} allTasks={allTasks}></MyLineChart>\n        </div>\n    );\n};\n\nexport default ProjectDistribution;\n","import axios from 'axios';\n\nconst PageUrl = window.location.hostname === 'localhost' ? 'http://localhost:3001' : 'https://kpi-node.herokuapp.com';\n\n//From Google Sheet\nconst OptimizationDataUrl =\n    'https://spreadsheets.google.com/feeds/list/1pCvD5tJAirXHWGC4CRDkaLsedSlopYCTkkynSq4RbxI/2/public/values?alt=json';\nconst IndicatorDataUrl =\n    'https://spreadsheets.google.com/feeds/list/1pCvD5tJAirXHWGC4CRDkaLsedSlopYCTkkynSq4RbxI/3/public/values?alt=json';\n\nconst ApiCaller = (url) => {\n    return axios.get(url);\n};\n\n//Get Google Sheet Data\nconst FetchOptimizationData = ApiCaller(OptimizationDataUrl);\nconst FetchIndicatorData = ApiCaller(IndicatorDataUrl);\n\n//Get Mongodb Data\nconst FetchPage = ApiCaller(`${PageUrl}/all-page-name`);\nconst getAllScore = (pageName) => ApiCaller(`${PageUrl}/all-score/${pageName}`);\nconst getAverageScore = (pageName) => ApiCaller(`${PageUrl}/average-score/${pageName}`);\n\nexport { FetchOptimizationData, FetchIndicatorData, FetchPage, getAllScore, getAverageScore };\n","import AllList from './AllList/AllList';\nimport DetailModal from './DetailModel/DetailModal';\nimport { useState, useEffect } from 'react';\nimport './PageOptimization.scss';\nimport AccumulationOfOptimizationPage from './AccumulationOfOptimizationPage/AccumulationOfOptimizationPage';\nimport AverageOfOptimization from './AverageOfOptimization/AverageOfOptimization';\nimport ComparePage from './ComparePage/ComparePage';\nimport RankOfPage from './RankOfPage/RankOfPage';\nimport TrackingPage from './TrackingPage/TrackingPage';\nimport ProjectDistribution from './ProjectDistribution/ProjectDistribution';\nimport { FetchOptimizationData, FetchIndicatorData, FetchPage, getAllScore, getAverageScore } from './ApiCaller';\n//import Type\nimport { IValueIsNumber, ITask, IPage } from './Type';\n\nconst PageOptimization = () => {\n    const [allTasks, setAllTasks] = useState<ITask[]>([]); //所有專案優化紀錄\n    // const [targetTask, setTargetTask] = useState({});\n    const [indicatorData, setIndicatorData] = useState<number>(0); //指標數字，如：效能平均\n    const [page, setPage] = useState<IPage>([]); //所有的監控頁面\n    const [pageData, setPageData] = useState<IValueIsNumber[]>([]); //監控頁面詳細數字，如：FCP、TTB等\n    const [mostEfficientPage, setMostEfficientPage] = useState<string>(''); //優化效率最高值\n    const [openModal, setOpenModal] = useState<boolean>(false); //開啟modal\n    const [projectCount, setProjectCount] = useState<number>(0); //累積優化件數\n    const [pageName, setPageName] = useState<string>('');\n    const [averageData, setAverageData] = useState<IValueIsNumber>({});\n    //function\n    const tagClick = (pageName: string) => {\n        getAllScore(pageName).then(({ data }) => {\n            setPageData(data);\n            setPageName(pageName);\n        });\n        getAverageScore(pageName).then(({ data }) => {\n            const { _id, ...res } = data[0];\n            setAverageData(res);\n        });\n        setOpenModal(true);\n    };\n\n    //fetch fixed data\n    useEffect(() => {\n        FetchOptimizationData.then(({ data }) => {\n            setProjectCount(data.feed.entry.length);\n            setAllTasks(data.feed.entry);\n            setMostEfficientPage(data.feed.entry[0].gsx$pagename.$t);\n        });\n        FetchIndicatorData.then(({ data }) => {\n            setIndicatorData(data.feed.entry[0].gsx$efficiencyaverage.$t);\n        });\n        FetchPage.then(({ data }) => {\n            setPage(data);\n        });\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"topic\">Optimization</div>\n\n            <div className=\"page-optimization\">\n                {/* <Form allTasks={allTasks} setAllTasks={setAllTasks}></Form> */}\n                {/* <MyBarChart allTasks={allTasks} targetTask={targetTask}></MyBarChart> */}\n                <div>\n                    <div className=\"graph-up\">\n                        <div className=\"indicator\">\n                            <AccumulationOfOptimizationPage projectCount={projectCount} />\n                            <AverageOfOptimization indicatorData={indicatorData} />\n                        </div>\n                        <div className=\"indicator\">\n                            <TrackingPage page={page} tagClick={tagClick}></TrackingPage>\n                            <ComparePage mostEfficientPage={mostEfficientPage}></ComparePage>\n                        </div>\n                        <RankOfPage allTasks={allTasks}></RankOfPage>\n                    </div>\n                    <div className=\"line-chart-container\">\n                        <ProjectDistribution indicatorData={indicatorData} allTasks={allTasks}></ProjectDistribution>\n                    </div>\n                </div>\n                <div className=\"all-list-container\">\n                    <AllList allTasks={allTasks}></AllList>\n                </div>\n            </div>\n            <DetailModal\n                setOpenModal={setOpenModal}\n                pageName={pageName}\n                openModal={openModal}\n                pageData={pageData}\n                averageData={averageData}\n            ></DetailModal>\n        </div>\n    );\n};\n\nexport default PageOptimization;\n","import { Link, useLocation } from 'react-router-dom';\nimport './Nav.css';\nconst Nav = () => {\n    const location = useLocation();\n\n    return (\n        <nav className=\"nav-bar\">\n            <Link to=\"/\" className={location.pathname === '/' ? 'active' : ''}>\n                Overview\n            </Link>\n            <Link to=\"/project\" className={location.pathname === '/project' ? 'active' : ''}>\n                Project\n            </Link>\n            <Link to=\"/optimization\" className={location.pathname === '/optimization' ? 'active' : ''}>\n                Optimization\n            </Link>\n        </nav>\n    );\n};\n\nexport default Nav;\n","import { Route } from 'react-router-dom';\nimport PageOptimization from './components/PageOptimization/PageOptimization';\nimport Nav from './components/Nav/Nav';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Nav />\n            <Route path=\"/\" exact={true}></Route>\n            <Route path=\"/optimization\" exact={true} component={PageOptimization}></Route>\n            {/* <header className=\"App-header\"><Counter /></header> */}\n            {/* <Route component={Error} /> */}\n        </div>\n    );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n    value: 0,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n//  typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n});\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload;\n        },\n    },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n        dispatch(incrementByAmount(amount));\n    }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <Switch>\n                    <App />\n                </Switch>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}